// Generated by CoffeeScript 1.6.3
(function() {
  var CPU;

  CPU = (function() {
    CPU.prototype.PC = 0;

    CPU.prototype.AC = 0;

    CPU.prototype.XR = 0;

    CPU.prototype.YR = 0;

    CPU.prototype.SR = 0;

    CPU.prototype.SP = 0;

    CPU.prototype.N = 0;

    CPU.prototype.V = 0;

    CPU.prototype.U = 1;

    CPU.prototype.B = 0;

    CPU.prototype.D = 0;

    CPU.prototype.I = 0;

    CPU.prototype.Z = 0;

    CPU.prototype.C = 0;

    CPU.prototype.ram = [];

    CPU.prototype.ramSize = 0xFFFF;

    function CPU() {
      var x, _i, _ref;
      for (x = _i = 0, _ref = this.ramSize; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.ram[x] = 0;
      }
    }

    CPU.prototype.reset = function() {
      return this.PC = 0;
    };

    CPU.prototype.clear = function() {
      var x, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = this.ramSize; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.ram[x] = 0);
      }
      return _results;
    };

    CPU.prototype.accumulator = function(oper) {
      return this.AC;
    };

    CPU.prototype.absolute = function(oper) {
      return this.ram[oper];
    };

    CPU.prototype.absoluteX = function(oper) {
      return this.ram[oper + this.XR];
    };

    CPU.prototype.absoluteY = function(oper) {
      return this.ram[oper + this.YR];
    };

    CPU.prototype.immediate = function(oper) {
      return oper;
    };

    CPU.prototype.implied = function(oper) {
      return this.AC;
    };

    CPU.prototype.indirect = function(oper) {
      return this.ram[this.ram[oper]];
    };

    CPU.prototype.indirectX = function(oper) {
      return this.ram[this.ram[(oper & 0x00FF) + this.XR]];
    };

    CPU.prototype.indirectY = function(oper) {
      return this.ram[this.ram[(oper & 0x00FF) + this.YR]];
    };

    CPU.prototype.relative = function(oper) {
      return this.ram[this.PC + oper];
    };

    CPU.prototype.zeropage = function(oper) {
      return this.ram[oper & 0x00FF];
    };

    CPU.prototype.zeropageX = function(oper) {
      return this.ram[(oper + this.XR) & 0x00FF];
    };

    CPU.prototype.zeropageY = function(oper) {
      return this.ram[(oper + this.YR) & 0x00FF];
    };

    CPU.prototype.accumulate = function(oper) {
      var bcd;
      if (this.D === 1) {
        bcd = parseInt(oper.toString(16));
        if (oper < 0) {
          this.AC = parseInt(bcd + parseInt(this.AC.toString(16)) - !this.C, 16);
          if (this.AC < 0) {
            this.C = 0;
            this.AC = 0x9A + this.AC;
            this.N = 1;
          } else {
            this.C = 1;
            this.AC = this.AC & 0xFF;
          }
        } else {
          this.AC = parseInt(bcd + parseInt(this.AC.toString(16)) + this.C, 16);
          if (this.AC > 0x99) {
            this.C = 1;
          } else {
            this.C = 0;
          }
          this.AC = this.AC & 0xFF;
        }
      } else {
        if (oper < 0) {
          this.AC = oper + this.AC - !this.C;
          if (this.AC < 0x80 && this.AC >= 0) {
            this.C = 0;
            this.N = 1;
            this.V = 0;
          } else if (this.AC >= 0x80 && this.AC <= 0xFF) {
            this.C = 1;
            this.N = 1;
            this.V = 0;
          } else {
            this.V = 1;
          }
        } else {
          this.AC = oper + this.AC + this.C;
          if (this.AC > 0xFF) {
            this.C = 1;
          } else {
            this.C = 0;
          }
        }
        this.AC = this.AC & 0xFF;
      }
      if (this.AC === 0) {
        this.Z = 1;
      } else {
        this.Z = 0;
      }
      return console.log(this.Z, this.AC);
    };

    CPU.prototype.binary2bcd = function(oper) {
      return parseInt(oper.toString(16));
    };

    CPU.prototype.SED = function() {
      return this.D = 1;
    };

    CPU.prototype.SEC = function() {
      return this.C = 1;
    };

    CPU.prototype.CLC = function() {
      return this.C = 0;
    };

    CPU.prototype.CLD = function() {
      return this.D = 0;
    };

    CPU.prototype.LDA = function(oper, addressing) {
      return this.AC = addressing(oper);
    };

    /*
    ADC  Add Memory to Accumulator with Carry
    
       A + M + C -> A, C                N Z C I D V
                                        + + + - - +
    
       addressing    assembler    opc  bytes  cyles
       --------------------------------------------
       immidiate     ADC #oper     69    2     2
       zeropage      ADC oper      65    2     3
       zeropage,X    ADC oper,X    75    2     4
       absolute      ADC oper      6D    3     4
       absolute,X    ADC oper,X    7D    3     4*
       absolute,Y    ADC oper,Y    79    3     4*
       (indirect,X)  ADC (oper,X)  61    2     6
       (indirect),Y  ADC (oper),Y  71    2     5*
    */


    CPU.prototype.ADC = function(oper, addressing) {
      return addressing(oper);
    };

    CPU.prototype.SBC = function(oper, addressing) {
      return addressing(oper);
    };

    return CPU;

  })();

  exports.CPU = CPU;

}).call(this);
