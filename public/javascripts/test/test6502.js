// Generated by CoffeeScript 1.8.0
(function() {
  var CPU, cpu6502, should;

  should = require('should');

  cpu6502 = require('../6502');

  CPU = cpu6502.CPU;

  describe('CPU init', function() {
    var cpu;
    it('should has a 16k ram', function() {});
    cpu = new CPU;
    return cpu.ram.length.should.eql(0x10000);
  });

  describe('Addressing mode', function() {
    var cpu;
    cpu = new CPU;
    it('should find oper immidiate', function() {
      return cpu.immediate(0xAD).should.eql(0xAD);
    });
    it('should find oper absolute', function() {
      cpu.ram[0xAD] = 0xD;
      return cpu.absolute(0xAD).should.eql(0xD);
    });
    it('should find oper absoluteX', function() {
      cpu.XR = 0x0C;
      cpu.ram[0xB9] = 0xDA;
      return cpu.absoluteX(0xAD).should.eql(0xDA);
    });
    it('should find oper absoluteY', function() {
      cpu.YR = 0x0D;
      cpu.ram[0xBA] = 0xDB;
      return cpu.absoluteY(0xAD).should.eql(0xDB);
    });
    it('should find oper immediate', function() {
      return cpu.immediate(0xBB).should.eql(0xBB);
    });
    it('should find oper implied', function() {
      cpu.AC = 0xDD;
      return cpu.implied(0xAD).should.eql(0xDD);
    });
    it('should find oper indirect', function() {
      cpu.ram[0x0A] = 0xBA;
      cpu.ram[0xBA] = 0xDB;
      return cpu.indirect(0x0A).should.eql(0xDB);
    });
    it('should find oper indirectX', function() {
      cpu.ram[0xBA] = 0xCD;
      cpu.ram[0xCD] = 0xDD;
      cpu.XR = 0xB0;
      return cpu.indirectX(0xAA0A).should.eql(0xDD);
    });
    it('should find oper indirectY', function() {
      cpu.ram[0xBA] = 0xCD;
      cpu.ram[0xCD] = 0xDD;
      cpu.YR = 0xB0;
      return cpu.indirectY(0xAA0A).should.eql(0xDD);
    });
    it('should find oper relative', function() {
      cpu.ram[0xBA] = 0xED;
      cpu.PC = 0xB0;
      return cpu.relative(0x0A).should.eql(0xED);
    });
    it('should find oper zeropage', function() {
      cpu.ram[0x0A] = 0xCD;
      return cpu.zeropage(0xAA0A).should.eql(0xCD);
    });
    it('should find oper zeropageX', function() {
      cpu.ram[0xCA] = 0xCC;
      cpu.XR = 0xC0;
      return cpu.zeropageX(0xAA0A).should.eql(0xCC);
    });
    return it('should find oper zeropageY', function() {
      cpu.ram[0xDA] = 0xED;
      cpu.YR = 0xD0;
      return cpu.zeropageY(0xAA0A).should.eql(0xED);
    });
  });

  describe('Binary Accumulate', function() {
    var cpu;
    cpu = new CPU;
    beforeEach(function() {
      cpu.CLD();
      return cpu.D.should.eql(0);
    });
    return it('should be: 88 + 70 + 1 = 159', function() {
      cpu.SEC();
      cpu.AC = 0x58;
      cpu.accumulate(0x46);
      return cpu.AC.should.eql(159);
    });
  });

  describe('BCD Accumulate', function() {
    var cpu;
    cpu = new CPU;
    beforeEach(function() {
      cpu.SED();
      return cpu.D.should.eql(1);
    });
    it('should be: 58 + 46 + 1 = 105', function() {
      cpu.SEC();
      cpu.AC = 0x58;
      cpu.accumulate(0x46);
      cpu.C.should.eql(1);
      return cpu.AC.should.eql(0x05);
    });
    it('should be: 12 + 34 = 46', function() {
      cpu.CLC();
      cpu.AC = 0x12;
      cpu.accumulate(0x34);
      cpu.C.should.eql(0);
      return cpu.AC.should.eql(0x46);
    });
    it('should be: 15 + 26 = 41', function() {
      cpu.CLC();
      cpu.AC = 0x15;
      cpu.accumulate(0x26);
      cpu.C.should.eql(0);
      return cpu.AC.should.eql(0x41);
    });
    it('should be: 81 + 92 = 173)', function() {
      cpu.CLC();
      cpu.AC = 0x81;
      cpu.accumulate(0x92);
      cpu.C.should.eql(1);
      return cpu.AC.should.eql(0x73);
    });
    it('should be: 46 - 12 = 34', function() {
      cpu.SEC();
      cpu.AC = 0x46;
      cpu.accumulate(-0x12);
      cpu.C.should.eql(1);
      return cpu.AC.should.eql(0x34);
    });
    it('should be: 40 - 13 = 27', function() {
      cpu.SEC();
      cpu.AC = 0x40;
      cpu.accumulate(-0x13);
      cpu.C.should.eql(1);
      return cpu.AC.should.eql(0x27);
    });
    it('should be: 32 - 2 - 1 = 29', function() {
      cpu.CLC();
      cpu.AC = 0x32;
      cpu.accumulate(-0x2);
      cpu.C.should.eql(1);
      return cpu.AC.should.eql(0x29);
    });
    it('should be: 12 - 21 = (91 - 100)', function() {
      cpu.SEC();
      cpu.AC = 0x12;
      cpu.accumulate(-0x21);
      cpu.C.should.eql(0);
      return cpu.AC.should.eql(0x91);
    });
    it('should be: 21 - 34 = (87 - 100)', function() {
      cpu.SEC();
      cpu.AC = 0x21;
      cpu.accumulate(-0x34);
      cpu.C.should.eql(0);
      return cpu.AC.should.eql(0x87);
    });
    return it('should be: 1 - 1 = 0', function() {
      cpu.SEC();
      cpu.AC = 0x01;
      cpu.accumulate(-0x01);
      cpu.Z.should.eql(1);
      return cpu.AC.should.eql(0x0);
    });
  });

  describe('Decimal Mode Tests for ADC', function() {
    var cpu;
    cpu = new CPU;
    cpu.SED();
    it('00 + 00 and C=0 gives 00 and N=0 V=0 Z=1 C=0', function() {
      cpu.CLC();
      cpu.LDA(0x00);
      cpu.ADC(0x00);
      cpu.AC.should.eql(0x00);
      cpu.N.should.eql(0);
      cpu.V.should.eql(0);
      cpu.Z.should.eql(1);
      return cpu.C.should.eql(0);
    });
    it('79 + 00 and C=1 gives 80 and N=1 V=1 Z=0 C=0', function() {
      cpu.SEC();
      cpu.LDA(0x79);
      cpu.ADC(0x00);
      cpu.AC.should.eql(0x80);
      cpu.N.should.eql(1);
      cpu.V.should.eql(1);
      cpu.Z.should.eql(0);
      return cpu.C.should.eql(0);
    });
    it('24 + 56 and C=0 gives 80 and N=1 V=1 Z=0 C=0', function() {
      cpu.CLC();
      cpu.LDA(0x24);
      cpu.ADC(0x56);
      cpu.AC.should.eql(0x80);
      cpu.N.should.eql(1);
      cpu.V.should.eql(1);
      cpu.Z.should.eql(0);
      return cpu.C.should.eql(0);
    });
    it('93 + 82 and C=0 gives 75 and N=0 V=1 Z=0 C=1', function() {
      cpu.CLC();
      cpu.LDA(0x93);
      cpu.ADC(0x82);
      cpu.AC.should.eql(0x75);
      cpu.N.should.eql(0);
      cpu.V.should.eql(1);
      cpu.Z.should.eql(0);
      return cpu.C.should.eql(1);
    });
    it('89 + 76 and C=0 gives 65 and N=0 V=0 Z=0 C=1', function() {
      cpu.CLC();
      cpu.LDA(0x89);
      cpu.ADC(0x76);
      cpu.AC.should.eql(0x65);
      cpu.N.should.eql(0);
      cpu.V.should.eql(0);
      cpu.Z.should.eql(0);
      return cpu.C.should.eql(1);
    });
    it('89 + 76 and C=1 gives 66 and N=0 V=0 Z=1 C=1', function() {});
    it('80 + f0 and C=0 gives d0 and N=0 V=1 Z=0 C=1', function() {});
    it('80 + fa and C=0 gives e0 and N=1 V=0 Z=0 C=1', function() {});
    it('2f + 4f and C=0 gives 74 and N=0 V=0 Z=0 C=0', function() {});
    return it('6f + 00 and C=1 gives 76 and N=0 V=0 Z=0 C=0', function() {});
  });

  describe('OPC 69', function() {
    var cpu;
    cpu = new CPU;
    beforeEach(function() {
      return cpu.clear();
    });
    return it('should be ADC immidiate', function() {
      return cpu.ram.length.should.eql(0x10000);
    });
  });

}).call(this);
